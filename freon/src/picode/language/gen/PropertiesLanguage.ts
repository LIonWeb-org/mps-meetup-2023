// Generated by the Freon Language Generator.
import { FreLanguage, Model, ModelUnit, FreLanguageProperty, FreLanguageConcept, Interface, FreNodeReference } from "@freon4dsl/core";

// Import as MyLanguage to avoid naming conflicts in generated constructors
import * as MyLanguage from "./internal";

/**
 * Creates an in-memory representation of structure of the language metamodel, used in e.g. the (de)serializer.
 */
export function initializeLanguage() {
    FreLanguage.getInstance().name = "properties";
    FreLanguage.getInstance().addModel(describeMainModel());
    FreLanguage.getInstance().addUnit(describePropertiesFile());
    FreLanguage.getInstance().addConcept(describeProperty());
    FreLanguage.getInstance().addConcept(describeValue());
    FreLanguage.getInstance().addConcept(describeBooleanValue());
    FreLanguage.getInstance().addConcept(describeDecValue());
    FreLanguage.getInstance().addConcept(describeIntValue());
    FreLanguage.getInstance().addConcept(describeStringValue());

    FreLanguage.getInstance().addReferenceCreator((name: string, type: string) => {
        return !!name ? FreNodeReference.create(name, type) : null;
    });
}

function describeMainModel(): Model {
    const model = {
        typeName: "MainModel",
        isNamespace: true,
        constructor: (id?: string) => {
            return new MyLanguage.MainModel(id);
        },
        properties: new Map<string, FreLanguageProperty>()
    };
    model.properties.set("name", {
        name: "name",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });
    model.properties.set("files", {
        name: "files",
        type: "PropertiesFile",
        isList: true,
        isPublic: true,
        propertyKind: "part"
    });

    return model;
}

function describePropertiesFile(): ModelUnit {
    const modelunit = {
        typeName: "PropertiesFile",
        id: "io_lionweb_Properties-PropertiesFile",
        isNamedElement: true,
        fileExtension: "pro",
        constructor: (id?: string) => {
            return new MyLanguage.PropertiesFile(id);
        },
        properties: new Map<string, FreLanguageProperty>()
    };
    modelunit.properties.set("name", {
        name: "name",
        id: "undefined",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });
    modelunit.properties.set("props", {
        name: "props",
        id: "io_lionweb_Properties-PropertiesFile-props",
        type: "Property",
        isList: true,
        isPublic: true,
        propertyKind: "part"
    });

    return modelunit;
}

function describeProperty(): FreLanguageConcept {
    const concept = {
        typeName: "Property",
        id: "io_lionweb_Properties-Property",
        isAbstract: false,
        isPublic: true,
        isNamedElement: true,
        trigger: "Property",
        constructor: (id?: string) => {
            return new MyLanguage.Property(id);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: []
    };
    concept.properties.set("name", {
        name: "name",
        id: "io_lionweb_Properties-Property-name",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });
    concept.properties.set("value", {
        name: "value",
        id: "io_lionweb_Properties-Property-value",
        type: "Value",
        isList: false,
        isPublic: true,
        propertyKind: "part"
    });

    return concept;
}

function describeValue(): FreLanguageConcept {
    const concept = {
        typeName: "Value",
        id: "io_lionweb_Properties-Value",
        isAbstract: false,
        isPublic: undefined,
        isNamedElement: false,
        trigger: "Value",
        constructor: (id?: string) => {
            return new MyLanguage.Value(id);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: null,
        subConceptNames: ["BooleanValue", "DecValue", "IntValue", "StringValue"]
    };

    return concept;
}

function describeBooleanValue(): FreLanguageConcept {
    const concept = {
        typeName: "BooleanValue",
        id: "io_lionweb_Properties-BooleanValue",
        isAbstract: false,
        isPublic: true,
        isNamedElement: false,
        trigger: "BooleanValue",
        constructor: (id?: string) => {
            return new MyLanguage.BooleanValue(id);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Value",
        subConceptNames: []
    };
    concept.properties.set("value", {
        name: "value",
        id: "io_lionweb_Properties-BooleanValue-value",
        type: "boolean",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });

    return concept;
}

function describeDecValue(): FreLanguageConcept {
    const concept = {
        typeName: "DecValue",
        id: "io_lionweb_Properties-DecValue",
        isAbstract: false,
        isPublic: true,
        isNamedElement: false,
        trigger: "DecValue",
        constructor: (id?: string) => {
            return new MyLanguage.DecValue(id);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Value",
        subConceptNames: []
    };
    concept.properties.set("value", {
        name: "value",
        id: "io_lionweb_Properties-DecValue-value",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });

    return concept;
}

function describeIntValue(): FreLanguageConcept {
    const concept = {
        typeName: "IntValue",
        id: "io_lionweb_Properties-IntValue",
        isAbstract: false,
        isPublic: true,
        isNamedElement: false,
        trigger: "IntValue",
        constructor: (id?: string) => {
            return new MyLanguage.IntValue(id);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Value",
        subConceptNames: []
    };
    concept.properties.set("value", {
        name: "value",
        id: "io_lionweb_Properties-IntValue-value",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });

    return concept;
}

function describeStringValue(): FreLanguageConcept {
    const concept = {
        typeName: "StringValue",
        id: "io_lionweb_Properties-StringValue",
        isAbstract: false,
        isPublic: true,
        isNamedElement: false,
        trigger: "StringValue",
        constructor: (id?: string) => {
            return new MyLanguage.StringValue(id);
        },
        properties: new Map<string, FreLanguageProperty>(),
        baseName: "Value",
        subConceptNames: []
    };
    concept.properties.set("value", {
        name: "value",
        id: "io_lionweb_Properties-StringValue-value",
        type: "string",
        isList: false,
        isPublic: true,
        propertyKind: "primitive"
    });

    return concept;
}
